# Save by sglallpr on 2024_10_31-12.31.01; build 2022.HF8 2023_03_27-08.24.44 RELr424 176957
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='Model-1', toName='Truss')
mdb.models['Truss'].ConstrainedSketch(name='__profile__', sheetSize=10000.0)
mdb.models['Truss'].sketches['__profile__'].Spot(point=(2060.0, 1000.0))
mdb.models['Truss'].sketches['__profile__'].Spot(point=(1700.0, 0.0))
mdb.models['Truss'].sketches['__profile__'].Spot(point=(1250.0, 225.0))
mdb.models['Truss'].sketches['__profile__'].Spot(point=(0.0, 850.0))
mdb.models['Truss'].sketches['__profile__'].Spot(point=(0.0, 1750.0))
mdb.models['Truss'].sketches['__profile__'].Line(point1=(2060.0, 1000.0), 
    point2=(1700.0, 0.0))
mdb.models['Truss'].sketches['__profile__'].Line(point1=(1700.0, 0.0), point2=(
    1250.0, 225.0))
mdb.models['Truss'].sketches['__profile__'].Line(point1=(1250.0, 225.0), 
    point2=(0.0, 850.0))
mdb.models['Truss'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Truss'].sketches['__profile__'].geometry[3], 
    entity2=mdb.models['Truss'].sketches['__profile__'].geometry[4])
mdb.models['Truss'].sketches['__profile__'].Line(point1=(0.0, 850.0), point2=(
    0.0, 1750.0))
mdb.models['Truss'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Truss'].sketches['__profile__'].geometry[5])
mdb.models['Truss'].sketches['__profile__'].Line(point1=(0.0, 1750.0), point2=(
    1250.0, 225.0))
mdb.models['Truss'].Part(dimensionality=TWO_D_PLANAR, name='Truss_part', type=
    DEFORMABLE_BODY)
mdb.models['Truss'].parts['Truss_part'].BaseWire(sketch=
    mdb.models['Truss'].sketches['__profile__'])
del mdb.models['Truss'].sketches['__profile__']
mdb.models['Truss'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Truss'].parts['Truss_part'].features['Wire-1'].sketch)
mdb.models['Truss'].parts['Truss_part'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Truss'].sketches['__edit__'], 
    upToFeature=mdb.models['Truss'].parts['Truss_part'].features['Wire-1'])
del mdb.models['Truss'].sketches['__edit__']
mdb.models['Truss'].Material(name='STEEL')
mdb.models['Truss'].materials['STEEL'].Density(table=((7800.0, ), ))
mdb.models['Truss'].materials['STEEL'].Elastic(table=((209000000000.0, 0.3), ))
mdb.models['Truss'].TrussSection(area=1000.0, material='STEEL', name=
    'Section-1')
mdb.models['Truss'].parts['Truss_part'].Set(edges=
    mdb.models['Truss'].parts['Truss_part'].edges.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['Truss'].parts['Truss_part'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Truss'].parts['Truss_part'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Truss'].TrussSection(area=100.0, material='STEEL', name=
    'Section-2')
mdb.models['Truss'].parts['Truss_part'].Set(edges=
    mdb.models['Truss'].parts['Truss_part'].edges.getSequenceFromMask((
    '[#1e ]', ), ), name='Set-2')
mdb.models['Truss'].parts['Truss_part'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Truss'].parts['Truss_part'].sets['Set-2'], sectionName=
    'Section-2', thicknessAssignment=FROM_SECTION)
mdb.models['Truss'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Truss'].rootAssembly.Instance(dependent=ON, name='Truss_part-1', 
    part=mdb.models['Truss'].parts['Truss_part'])
mdb.models['Truss'].rootAssembly.Set(name='Set-1', vertices=
    mdb.models['Truss'].rootAssembly.instances['Truss_part-1'].vertices.getSequenceFromMask(
    ('[#11 ]', ), ))
mdb.models['Truss'].PinnedBC(createStepName='Initial', localCsys=None, name=
    'Pinned', region=mdb.models['Truss'].rootAssembly.sets['Set-1'])
mdb.models['Truss'].rootAssembly.Set(name='Set-2', vertices=
    mdb.models['Truss'].rootAssembly.instances['Truss_part-1'].vertices.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Truss'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='Roller', 
    region=mdb.models['Truss'].rootAssembly.sets['Set-2'], u1=SET, u2=UNSET, 
    ur3=SET)
mdb.models['Truss'].StaticStep(name='Apply_loads', previous='Initial')
mdb.models['Truss'].rootAssembly.Set(name='Set-3', vertices=
    mdb.models['Truss'].rootAssembly.instances['Truss_part-1'].vertices.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Truss'].ConcentratedForce(cf1=5000.0, cf2=100000.0, createStepName=
    'Apply_loads', distributionType=UNIFORM, field='', localCsys=None, name=
    'Load-1', region=mdb.models['Truss'].rootAssembly.sets['Set-3'])
mdb.models['Truss'].parts['Truss_part'].setElementType(elemTypes=(ElemType(
    elemCode=T2D2, elemLibrary=STANDARD), ), regions=(
    mdb.models['Truss'].parts['Truss_part'].edges.getSequenceFromMask((
    '[#1f ]', ), ), ))
mdb.models['Truss'].parts['Truss_part'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Truss'].parts['Truss_part'].edges.getSequenceFromMask((
    '[#1f ]', ), ), number=1)
mdb.models['Truss'].parts['Truss_part'].generateMesh()
mdb.models['Truss'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Truss', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HCBC-029', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 1 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'M:\\Documents\\AERO417\\AERO417\\Coursework1\\Abaqus\\Static\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HCBC-029', 'handle': 15016, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 24.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16165.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Oct 31 12:50:56 2024', 
    'jobName': 'Job-1'})
mdb.models['Truss'].materials['STEEL'].density.setValues(table=((7.8e-06, ), ))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Truss', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HCBC-029', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 1 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'M:\\Documents\\AERO417\\AERO417\\Coursework1\\Abaqus\\Static\\Job-2.odb', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HCBC-029', 'handle': 2596, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 24.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16165.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_COMPLETED, {'time': 'Thu Oct 31 13:10:14 2024', 
    'jobName': 'Job-2'})
# Save by sglallpr on 2024_10_31-14.22.07; build 2022.HF8 2023_03_27-08.24.44 RELr424 176957
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Truss'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Truss'].parts['Truss_part'].features['Wire-1'].sketch)
mdb.models['Truss'].parts['Truss_part'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Truss'].sketches['__edit__'], 
    upToFeature=mdb.models['Truss'].parts['Truss_part'].features['Wire-1'])
del mdb.models['Truss'].sketches['__edit__']
mdb.models['Truss'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Truss'].parts['Truss_part'].features['Wire-1'].sketch)
mdb.models['Truss'].parts['Truss_part'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Truss'].sketches['__edit__'], 
    upToFeature=mdb.models['Truss'].parts['Truss_part'].features['Wire-1'])
mdb.models['Truss'].sketches['__edit__'].Line(point1=(1700.0, 0.0), point2=(
    2900.0, 0.0))
mdb.models['Truss'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Truss'].sketches['__edit__'].geometry[7])
mdb.models['Truss'].materials['STEEL'].elastic.setValues(table=((209000.0, 
    0.3), ))
del mdb.models['Truss'].sketches['__edit__']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Truss', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-3', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-3'].submit(consistencyChecking=OFF)
mdb.jobs['Job-3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HCBC-029', 'handle': 0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof 6 at 1 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof6.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'M:\\Documents\\AERO417\\AERO417\\Coursework1\\Abaqus\\Static\\Job-3.odb', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HCBC-029', 'handle': 17952, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-3', 'memory': 24.0})
mdb.jobs['Job-3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16165.0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-3', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-3']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(JOB_COMPLETED, {'time': 'Thu Oct 31 14:36:47 2024', 
    'jobName': 'Job-3'})
del mdb.jobs['Job-1']
del mdb.jobs['Job-2']
# Save by sglallpr on 2024_10_31-14.47.33; build 2022.HF8 2023_03_27-08.24.44 RELr424 176957
